//-----------------------------------------------------------------------------
//!
//!	@file	gmTaskBase.h
//!	@brief	タスク基底
//!	@author YukiIshigaki
//!
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
//! 関数呼び出し専用クラス
//-----------------------------------------------------------------------------
class Invoker
{
public:
	virtual void invoke() = 0;
};

//-----------------------------------------------------------------------------
//! 関数呼び出し専用クラス(テンプレート)
//-----------------------------------------------------------------------------
template <typename T>
class TaskInvoker : public Invoker
{
public:
	//-------------------------------------------------------------
	//!	@name	初期化
	//-------------------------------------------------------------
	//@{

	//! デフォルトコンストラクタ
	TaskInvoker() : _pThis(nullptr) {}

	//! コンストラクタ
	TaskInvoker(T* pThis)
	: _pThis(pThis)
	{
	}

	//@}
	//-------------------------------------------------------------
	//!	@name	タスク関数
	//-------------------------------------------------------------
	//@{

	//! 呼び出し
	virtual void invoke()
	{
		_pThis->asyncUpdate();
	}

	//@}

	T* _pThis;	//! 自分のポインタ
};

//-----------------------------------------------------------------------------
//! タスク基底
//!	@breif これを継承してタスクを作成
//-----------------------------------------------------------------------------
class TaskBase
{
public:
	//-------------------------------------------------------------
	//!	@name	初期化
	//-------------------------------------------------------------
	//@{

	//! コンストラクタ
	TaskBase() {}

	//! デストラクタ
	virtual ~TaskBase() {}

	//@}
	//-------------------------------------------------------------
	//!	@name	タスク関数
	//! 関数を継承してカスタムします。
	//-------------------------------------------------------------
	//@{

	//! 初期化
	virtual bool	setup() { return true; }

	//! 解放
	virtual void	cleanup() {}

	//! 並列更新
	virtual void	asyncUpdate() {}

	//! 直列更新
	virtual void	update() {}

	//! 描画
	virtual void	render() {}


	//@}
private:
	list<TaskBase>	_taskList;	//!< タスクリスト
};


//=============================================================================
//	END OF FILE
//=============================================================================