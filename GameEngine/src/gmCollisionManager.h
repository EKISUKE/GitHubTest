//-----------------------------------------------------------------------------
//!
//!	@file	gmCollisionManager.h
//!	@brief	衝突判定管理
//!	@author	YukiIshigaki
//!
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
//! 衝突判定管理クラス
//-----------------------------------------------------------------------------
class CollisionManager
{
private:
	//-------------------------------------------------------------
	//!	@name 初期化
	//-------------------------------------------------------------
	//@{

	//! デフォルトコンストラクタ
	CollisionManager()
	{
		Init();
	}
	//! コピーコンストラクタ
	CollisionManager(CollisionManager& src){}

	//! デストラクタ
	virtual ~CollisionManager(){}

public:
	//! 初期化
	void	Init()
	{
		_nowIndex = 0;
		// 全初期化
		for( s32 i=0; i<LIST_MAX; ++i )
		{
			_collisionList[i] = NULL;
		}
	}

	//@}
	//-------------------------------------------------------------
	//! @name タスク関数
	//-------------------------------------------------------------
	//@{

	//! 更新
	void	Update();

	//@}
	//-------------------------------------------------------------
	//!	@name 取得・設定
	//-------------------------------------------------------------
	//@{

	//! インスタンス取得
	static CollisionManager* getInstance()
	{
		static CollisionManager _myInstance;
		return &_myInstance;
	}

	//@}
	//-------------------------------------------------------------
	//!	@name 登録・解除
	//-------------------------------------------------------------
	//@{

	//! 登録
	//!	@param	[in]	regist	登録する当たり判定情報
	void	Regist(Collision* regist);
	//! 解除
	//!	@param	[in]	regist	解除する当たり判定情報
	void	UnRegist(Collision* unRegist);

	//@}
	
private:
	//list<Collision*>	_collisionList;
	static const s32 LIST_MAX = 300;
	Collision*		_collisionList[LIST_MAX];
	s32				_nowIndex;
};

//-----------------------------------------------------------------------------
// アクセスインターフェイス
//-----------------------------------------------------------------------------
__forceinline
CollisionManager*	GmCollisionMan()
{
	return CollisionManager::getInstance();
}


//=============================================================================
//	END OF FILE
//=============================================================================