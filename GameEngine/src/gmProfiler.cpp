//-----------------------------------------------------------------------------
//!
//!	@file	gmProfilter.cpp
//!	@brief	プロファイラー
//!	@author	YukiIshigaki
//!
//-----------------------------------------------------------------------------
#include "stdafx.h"


PerfAnalizer	gPerfAnalizer;

//-----------------------------------------------------------------------------
//! コンストラクタ
//-----------------------------------------------------------------------------
PerfAnalizer::PerfAnalizer()
: _pRoot(nullptr)
{
	_pRoot = new PerfAnalizer::Node();
}

//-----------------------------------------------------------------------------
//! デストラクタ
//-----------------------------------------------------------------------------
PerfAnalizer::~PerfAnalizer()
{
	delete _pRoot;
}

//-----------------------------------------------------------------------------
//! ノードを開く
//-----------------------------------------------------------------------------
PerfAnalizer::Node* PerfAnalizer::openNode()
{
	// ノードを新規作成
	PerfAnalizer::Node* p = new PerfAnalizer::Node();
	if( p == nullptr ) return nullptr;

	// 作成したノードを「現在のノード」の子に追加
	_pCurrent->addChild( p );

	// 「現在のノード」を作成したノードに変更
	_pCurrent = p;

	return p;
}

//-----------------------------------------------------------------------------
//! ノードを閉じる
//-----------------------------------------------------------------------------
void PerfAnalizer::closeNode()
{
	// 親を「現在のノード」にする
	_pCurrent = _pCurrent->_pParent;
}

//-----------------------------------------------------------------------------
//! 計測開始
//-----------------------------------------------------------------------------
void PerfAnalizer::begin()
{
	//-------------------------------------------------------------
	// ルートノード以下の改造をクリーンナップ
	//-------------------------------------------------------------
	_pRoot->cleanup();

	// 「現在のノード」をルートにする
	_pCurrent = _pRoot;

	_baseTime = getCounter();
}

static const Size<s32>	windowSize	= GmWindow()->getResolution();
static const f32		MARGIN_X	= 64.0f;	// 左右マージン
static const f32		X			= MARGIN_X;
static const f32		Y			= windowSize._h - 128.0f;
static const f32		W			= windowSize._w - MARGIN_X*2.0f;
static const f32		H			= 16.0f;

//-----------------------------------------------------------------------------
//! 計測終了
//-----------------------------------------------------------------------------
void PerfAnalizer::end()
{
	
}

//-----------------------------------------------------------------------------
//! 描画
//-----------------------------------------------------------------------------
void PerfAnalizer::render()
{
	//-------------------------------------------------------------
	// 土台
	//-------------------------------------------------------------
	drawRect(X, Y, W, H, Color(255, 255, 255, 64));

	for( int i=0; i<5+1; ++i ) {
		drawRect(X + (W/5)*(f32)i  , Y - 2.0f, 1.0f, H + 4.0f, Color(255, 255, 255, 255));
	}

	// ルートからデバッグ描画
	drawNode( _pRoot->_pChild , 0);
}

//-----------------------------------------------------------------------------
//! ノードの描画(再帰)
//-----------------------------------------------------------------------------
void PerfAnalizer::drawNode(PerfAnalizer::Node* pNode, s32 nest)
{

	// かかった時間をカウンターの差分から求める
	u64 t1 = pNode->_startTime  - _baseTime;
	u64 t2 = pNode->_finishTime - _baseTime;

	u64	freq = getFrequency();

	f64	second1 = (f64)t1 / (f64)freq;
	f64	second2 = (f64)t2 / (f64)freq;

	// 1/60秒のパーセント
	f32	percent1 = (f32)(second1 * 60.0 / 5.0);
	f32	percent2 = (f32)(second2 * 60.0 / 5.0);

	
	// バーの描画
	if( nest == 0 ) {
		drawRect(X+W *(percent1), Y+2.0f,				W * (percent2 - percent1), H - 4.0f, pNode->_color);	
	}else{
		drawRect(X+W *(percent1), Y+2.0f + (nest*2.0f),	W * (percent2 - percent1),	   2.0f, pNode->_color);	
	}

	//-------------------------------------------------------------
	// 兄弟のノードの描画
	//-------------------------------------------------------------
	if( pNode->_pNext ) {
		drawNode(pNode->_pNext, nest);
	}

	//-------------------------------------------------------------
	// 子のノードの描画
	//-------------------------------------------------------------
	if( pNode->_pChild ) {
		drawNode(pNode->_pChild, nest + 1);
	}
}


//-----------------------------------------------------------------------------
//! コンストラクタ
//! @param	[in]	name	計測名
//! @param	[in]	color	表示カラー
//-----------------------------------------------------------------------------
Profiler::Profiler(GM_CSTR name, const Color& color)
{
	auto pNode = gPerfAnalizer.openNode();

	// 計測開始
	pNode->_startTime = getCounter();
	pNode->_name	  = name;
	pNode->_color	  = color;

	_pNode = pNode;
}

//-----------------------------------------------------------------------------
//! デストラクタ
//-----------------------------------------------------------------------------
Profiler::~Profiler()
{

	// 計測終了
	_pNode->_finishTime = getCounter();

	gPerfAnalizer.closeNode();

#if 0
	// かかった時間をカウンターの差分から求める
	u64 t = _finishTime - _startTime;

	u64	freq = getFrequency();

	f64	second = (f64)t / (f64)freq;

	// 1/60秒のパーセント
	f32	percent = (second * 60.0 * 100.0 );

	char	str[512];
	sprintf(str, "かかった時間は %f %%.\n", percent);
	OutputDebugString(str);
#endif
}


//===========================================================================
//	END OF FILE
//===========================================================================
