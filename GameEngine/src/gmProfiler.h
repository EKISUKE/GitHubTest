//-----------------------------------------------------------------------------
//!
//!	@file	gmProfilter.h
//!	@brief	プロファイラー
//!	@author	YukiIshigaki
//!
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
//!	パフォーマンス解析
//-----------------------------------------------------------------------------
class PerfAnalizer
{
public:
	class Node;		// 計測情報

	//----------------------------------------------------------
	//!	@name 初期化
	//----------------------------------------------------------
	//@{

	//! コンストラクタ
	PerfAnalizer();

	//! デストラクタ
	virtual ~PerfAnalizer();

	//@}
	//----------------------------------------------------------
	//! @name タスク関数
	//----------------------------------------------------------
	//@{

	//! ノードを開く
	PerfAnalizer::Node* openNode();

	//! ノードを閉じる
	void				closeNode();

	//! 計測開始
	void				begin();

	//! 計測終了
	void				end();

	//! 描画
	void				render();

private:

	//! ノードの描画(再帰)
	void				drawNode(PerfAnalizer::Node* pNode, s32 nest);

	//@}

	u64					_baseTime;	//!< 全体開始時間

	PerfAnalizer::Node*	_pRoot;		//!< 計測ツリーのトップ

	PerfAnalizer::Node*	_pCurrent;	//!< 現在使用中のノード

};

extern PerfAnalizer	gPerfAnalizer;

//-----------------------------------------------------------------------------
//!	解析データノード
//-----------------------------------------------------------------------------
class PerfAnalizer::Node
{
public:

	//----------------------------------------------------------
	//!	@name 初期化
	//----------------------------------------------------------
	//@{

	//! コンストラクタ
	Node()
	:_pNext  (nullptr)
	,_pChild (nullptr)
	,_pParent(nullptr)
	{
	}

	//! デストラクタ
	~Node()
	{
		delete _pNext;
		delete _pChild;
	}

	//@}
	//----------------------------------------------------------
	//! @name タスク関数
	//----------------------------------------------------------
	//@{

	//! ノードをすべて破棄する
	void	cleanup()
	{
		delete _pChild;
		_pChild = nullptr;
	}

	//! 子供にノードを追加する
	void	addChild(Node* pNode)
	{
		if( _pChild ) { //---- 子の先頭に挿入
			pNode->_pNext = _pChild;
			_pChild		  = pNode;
		}else{			//---- 子に追加する初回
			_pChild = pNode;
		}
		// 親情報の追加
		pNode->_pParent = this;
	}

	//@}
public:
	GM_CSTR		_name;			//!< タイマー名
	Color		_color;			//!< 描画色
	u64			_startTime;		//!< 開始時間
	u64			_finishTime;	//!< 終了時間

	Node*		_pNext;			//!< 兄弟
	Node*		_pChild;		//!< 子
	Node*		_pParent;		//!< 親
};

//-----------------------------------------------------------------------------
//!	計測インターフェイス
//-----------------------------------------------------------------------------
class Profiler
{
public:

	//----------------------------------------------------------
	//!	@name 初期化
	//----------------------------------------------------------
	//@{

	//! コンストラクタ
	//! @param	[in]	name	計測名
	//! @param	[in]	color	表示カラー
	Profiler(GM_CSTR name, const Color& color);

	//! デストラクタ
	~Profiler();

	//@}
private:
	PerfAnalizer::Node*		_pNode;	//!< 計測結果保存先
};

// 変数名に別のものをくっつけてかぶらないようにする
#define GM_I1_CONCAT(a, b) GM_I2_CONCAT( a ## b )
#define GM_I2_CONCAT(ab)   ab
#define GM_CONCAT(a, b)	   GM_I1_CONCAT(a, b)


#define GM_PROFILE(NAME_, COLOR_) Profiler GM_CONCAT(gm_profilter_node_, __LINE__) ( NAME_, COLOR_ );

//=============================================================================
//	END OF FILE
//=============================================================================
