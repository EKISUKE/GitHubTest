//-----------------------------------------------------------------------------
//!
//!	@file	gmShaderObjectBase.h
//!	@brief	シェーダ基底
//!	@author YukiIshigaki
//!
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
//!	シェーダ管理
//-----------------------------------------------------------------------------
class ShaderObjectBase
{
public:
	//-------------------------------------------------------------
	//! @name 初期化
	//-------------------------------------------------------------
	//@{

	//! コンストラクタ
	ShaderObjectBase();
	
	//! デストラクタ
	virtual ~ShaderObjectBase();

	//@}
	//-------------------------------------------------------------
	//! @name タスク関数
	//-------------------------------------------------------------
	//@{

	//! シェーダプログラム読み込み
	//!	@param	[in]	filePath		
	virtual bool		LoadAndCompile(GM_CSTR filePath) = 0;

	//! シェーダの読み込み
	//!	@param	[in]	filePath
	bool				readShaderSource(GM_CSTR filePath);

	//@}
	//-------------------------------------------------------------
	//! @name 取得・設定
	//-------------------------------------------------------------
	//@{

	GLuint&		getShader() { return myShader; }
	
	//@}
protected:
	//! シェーダコンパイルエラーの出力
	static void printShaderInfoLog(GLuint shader);
	// シェーダ
	GLuint myShader;				//!< フラグメントシェーダ
	//! シェーダコンパイルのログバッファ 
	static const s32 MAX_SHADER_LOG_SIZE = 1024;
	static char s_logBuffer[MAX_SHADER_LOG_SIZE];
};


//=============================================================================
// END OF FILE
//=============================================================================